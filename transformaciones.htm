<!DOCTYPE html>
<html>
    <head>
        <title>Titulo</title>
        <style>
            html, body { margin: 0; padding: 0; overflow: hidden; }
            #text {
                position: absolute;
                padding: 10px;
                width: 100%;
                text-align: center;
                
            }
        </style>
    </head>
    <body>
        <div id="text">Titulo<br/>
            Subtitulo<br/>
            Descripción<br/>
        </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r94/three.min.js"></script>
    <script>
        function cubo(posini, lado, color, material){
            cubo_ = new THREE.Geometry();
            this.color=color;
            // Crear el material del cubo
            if (material) {
                // Si se recibe un material como parámetro, utilizarlo
                var cubeMaterial = material;
            } else {
                // Si no se recibe un material, crear uno nuevo con las propiedades de Material
                var cubeMaterial = new THREE.ParticleBasicMaterial({color: this.color});
            }
            //proceso de contrucccion del cubo...
            var vertices = [[0,0,0],[lado,0,lado],[lado,lado,lado],[0,lado,0],
                        [0,0,0], [-lado,0,lado], [-lado,lado,lado], [0,lado,0],[0,0,0],
                        [lado,0,lado], [0,0,lado*2], [-lado,0,lado], [0,0,0], [lado,0,lado],
                        [lado,lado,lado], [0,lado,lado*2], [-lado,lado,lado], [0,lado,0], [0,0,0],
                        [lado,0,lado], [lado,lado,lado], [0,lado,lado*2], [0,0,lado*2], [lado,0,lado],[0,0,0]];
            
            var largoVertice = vertices.length;
            for(i =0; i< largoVertice;i++){
            x = vertices[i][0];
            y = vertices[i][1];
            z = vertices[i][2];
            vector = new THREE.Vector3(x, y, z);
            cubo_.vertices.push(vector);
        }

            Cuadrado4 = new THREE.Line(cubo_,material);
            Cuadrado4.position.set(posini[0], posini[1], posini[2]);

            scene.add(Cuadrado4);

            return Cuadrado4;
        }

    function init() {

        // Escena
        scene = new THREE.Scene();
        camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);    
        renderer = new THREE.WebGLRenderer();
        renderer.setClearColor(0x000000, 1.0);
        renderer.setSize(window.innerWidth, window.innerHeight);

        var size = 700;
        var arrowSize = 40;
        var divisions = 20;
        var origin = new THREE.Vector3( 0, 0, 0 );
        var x = new THREE.Vector3( 1, 0, 0 );
        var y = new THREE.Vector3( 0, 1, 0 );
        var z = new THREE.Vector3( 0, 0, 1 );
        var color2 = new THREE.Color( 0x333333 );  /// 0x333333
        var colorR = new THREE.Color( 0xAA0000 );
        var colorG = new THREE.Color( 0x00AA00 );
        var colorB = new THREE.Color( 0x0000AA );

        //Crear la Grilla
        var gridHelperXZ = new THREE.GridHelper( size, divisions, color2, color2);

        //Flechas
        var arrowX = new THREE.ArrowHelper( x, origin, arrowSize, colorR );
        var arrowY = new THREE.ArrowHelper( y, origin, arrowSize, colorG );
        var arrowZ = new THREE.ArrowHelper( z, origin, arrowSize, colorB );
			
        //Cámara
        camera.position.x = 000;
        camera.position.y = 100;
        camera.position.z = 400;
        camera.lookAt(scene.position);

        //Creación de las Figuras
        /*/
        Geometria3 = new THREE.Geometry();
        var vertices = [[0,0,0],[40,0,40],[40,40,40],[0,40,0],
                        [0,0,0], [-40,0,40], [-40,40,40], [0,40,0],[0,0,0],
                        [40,0,40], [0,0,80], [-40,0,40], [0,0,0], [40,0,40],
                        [40,40,40], [0,40,80], [-40,40,40], [0,40,0], [0,0,0],
                        [40,0,40], [40,40,40], [0,40,80], [0,0,80], [40,0,40],[0,0,0],[0,40,0]
                        ];
        var largoVertice = vertices.length;
        for(i =0; i< largoVertice;i++){
            x = vertices[i][0];
            y = vertices[i][1];
            z = vertices[i][2];
            vector = new THREE.Vector3(x, y, z);
            Geometria3.vertices.push(vector);
        }

        Material3=new THREE.ParticleBasicMaterial({color:0xFF00ff});
        Cuadrado3 = new THREE.Line(Geometria3,Material3);
        /*/

        var cubo1 = cubo([0, 0, 0], 40, 0xFF00ff);
        var cubo2 = cubo([0, 0, 0], 30, 0xFF00ff, new THREE.MeshBasicMaterial({color: 0x0000ff}));

        // Matriz de Traslación
        var matrizT = new THREE.Matrix4();
        matrizT.set(1, 0, 0, 2*40,
                    0, 1, 0, 0,
                    0, 0, 1, 0,
                    0, 0, 0, 1);

                cubo1.applyMatrix(matrizT);         

        // Matriz de Escala
        var matrizS = new THREE.Matrix4();
        matrizS.set(1.5, 0, 0, 0,
                    0, 1.5, 0, 0,
                    0, 0, 1.5, 0,
                    0, 0, 0, 1);

                cubo1.applyMatrix(matrizS);

        // Matriz de Rotación
        var matrizR = new THREE.Matrix4();
        var alpha = 45;
		var cs = Math.cos(alpha);
		var ss = Math.sin(alpha);

		matrizR.set(1, 0, 0, 0,
        		    0, cs, -ss, 0, 
				    0, ss, cs, 0,
				    0, 0, 0, 1);	

                cubo1.applyMatrix(matrizR);

        // En el documento HTML
        document.body.appendChild(renderer.domElement);

        // Agregar elementos al escenario
        scene.add(gridHelperXZ);
	    scene.add(arrowX);
		scene.add(arrowY);
		scene.add(arrowZ);
        scene.add(cubo1);

        renderer.render(scene, camera);
    }

    init();  // otra forma: window.onload = init;

    </script>
  </body>
</html>
